{"version":3,"sources":["components/Textfield/Textfield.js","components/Button/Button.js","components/FormUser/FormUser.js","hooks/useSetState.js","components/ListUsers/ItemUser.js","components/ListUsers/ListUsers.js","App.js","serviceWorker.js","index.js"],"names":["Textfield","error","value","type","handleChange","placeholder","label","name","className","htmlFor","id","onChange","Button","children","FormUser","handleSubmit","user","onSubmit","firstname","lastname","birth","initialUser","reducer","state","next","validate","date","moment","validateBirth","isEmpty","ItemUser","ListUsers","users","map","key","App","React","useState","setUsers","initial","useReducer","dispatch","setState","newState","useSetState","setUser","e","target","preventDefault","Object","keys","every","isValid","userData","trim","format","getUser","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.08ef1eb8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Textfield = ({\n  error,\n  value,\n  type,\n  handleChange,\n  placeholder,\n  label,\n  name,\n}) => (\n  <>\n    <div className=\"w-full mt-2\">\n      <label className=\"text-lg leading-5\" htmlFor={name}>\n        {label}:\n      </label>\n      <div>\n        <input\n          className=\"w-full mt-1 text-lg form-input\"\n          value={value}\n          id={name}\n          name={name}\n          placeholder={placeholder}\n          onChange={handleChange}\n          type={type}\n        />\n        {!!error && (\n          <span className=\"block mt-1 text-xs text-red-500\">{error}</span>\n        )}\n      </div>\n    </div>\n  </>\n);\n\nexport default Textfield;\n","import React from 'react';\n\nconst Button = ({ children, type }) => (\n  <button className=\"px-4 py-2 mt-4 text-indigo-500 bg-blue-200\" type={type}>\n    {children}\n  </button>\n);\n\nexport default Button;\n","import React from 'react';\nimport Textfield from '../Textfield';\nimport Button from '../Button';\n\nconst FormUser = ({ handleSubmit, user, handleChange }) => {\n  return (\n    <form className=\"w-full\" onSubmit={handleSubmit}>\n      <Textfield\n        type=\"text\"\n        name=\"firstname\"\n        handleChange={handleChange}\n        label=\"Nombres\"\n        value={user.firstname.value}\n        error={user.firstname.error}\n      />\n      <Textfield\n        value={user.lastname.value}\n        type=\"text\"\n        name=\"lastname\"\n        handleChange={handleChange}\n        label=\"Apellidos\"\n        error={user.lastname.error}\n      />\n      <Textfield\n        value={user.birth.value}\n        type=\"date\"\n        name=\"birth\"\n        handleChange={handleChange}\n        label=\"Fecha de nacimiento\"\n        error={user.birth.error}\n      />\n      <Button type=\"submit\">Registrar</Button>\n    </form>\n  );\n};\n\nexport default FormUser;\n","import React from \"react\";\nimport moment from \"moment\";\nimport trim from \"lodash/trim\";\nimport isEmpty from \"lodash/isEmpty\";\n\nconst initialUser = {\n  firstname: {\n    value: \"\",\n    error: \"\",\n  },\n  lastname: {\n    value: \"\",\n    error: \"\",\n  },\n  birth: {\n    value: \"\",\n    error: \"\",\n  },\n};\n\nconst reducer = (state, next) => {\n  return {\n    ...state,\n    ...next,\n  };\n};\n\nconst useSetState = (initial = initialUser) => {\n  const [state, dispatch] = React.useReducer(reducer, initial);\n  const setState = (newState) => dispatch(newState);\n  return [state, setState];\n};\n\nconst getUser = (user) => ({\n  firstname: trim(user.firstname.value),\n  lastname: trim(user.lastname.value),\n  birth: moment(user.birth.value).format(\"dddd, MMMM Do YYYY\"),\n});\n\nconst validateBirth = (value) => {\n  const date = moment(value);\n  const now = moment();\n  if (now > date) {\n    return \"\";\n  } else {\n    return \"Invalid date\";\n  }\n};\n\nconst validate = ({ name, value }) => {\n  if (name === \"birth\") {\n    return validateBirth(value);\n  }\n  if (isEmpty(value)) {\n    return `Field invalid`;\n  }\n  return \"\";\n};\n\nconst isValid = (user) => {\n  return Object.keys(user).every((key) => {\n    return user[key].value && !user[key].error;\n  });\n};\n\nexport { useSetState, initialUser, getUser, validate, isValid };\n","import React from 'react';\n\nconst ItemUser = ({ user }) => {\n  return (\n    <tr className=\"bg-white\">\n      <td className=\"px-6 py-4 text-sm font-medium text-gray-900 whitespace-no-wrap leading-5\">\n        {user.firstname}\n      </td>\n      <td className=\"px-6 py-4 text-sm font-medium text-gray-900 whitespace-no-wrap leading-5\">\n        {user.lastname}\n      </td>\n      <td className=\"px-6 py-4 text-sm font-medium text-gray-900 whitespace-no-wrap leading-5\">\n        {user.birth}\n      </td>\n    </tr>\n  );\n};\n\nexport default ItemUser;\n","import React from 'react';\nimport ItemUser from './ItemUser';\n\nconst ListUsers = ({ users }) => {\n  return (\n    <table className=\"min-w-full mt-4\">\n      <thead>\n        <tr>\n          <th className=\"px-6 py-3 bg-gray-100 border-b border-gray-200\">\n            Nombres\n          </th>\n          <th className=\"px-6 py-3 bg-gray-100 border-b border-gray-200\">\n            Apellidos\n          </th>\n          <th className=\"px-6 py-3 bg-gray-100 border-b border-gray-200\">\n            Fecha de nacimiento\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {users.map((user) => (\n          <ItemUser key={user.id} user={user} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\nexport default ListUsers;\n","import React from 'react';\nimport FormUser from './components/FormUser';\nimport {\n  useSetState,\n  getUser,\n  initialUser,\n  validate,\n  isValid,\n} from './hooks/useSetState';\nimport ListUsers from './components/ListUsers';\n\nfunction App() {\n  const [users, setUsers] = React.useState([]);\n  const [user, setUser] = useSetState(initialUser);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const check = isValid(user);\n    if (check) {\n      const userData = getUser(user);\n      setUsers((users) => [...users, { ...userData, id: users.length + 1 }]);\n      setUser(initialUser);\n    } else {\n      Object.keys(user).map((key) => {\n        const error = validate({ name: key, value: user[key].value });\n        return setUser({ [key]: { value: user[key].value, error } });\n      });\n    }\n  };\n  const handleChange = (e) => {\n    const error = validate({ name: e.target.name, value: e.target.value });\n    setUser({ [e.target.name]: { value: e.target.value, error } });\n  };\n  return (\n    <main className=\"flex items-center justify-center\">\n      <div className=\"container flex flex-col md:flex-row md:mt-20\">\n        <section className=\"w-full px-4 mt-4 md:px-8 md:mt-0\">\n          <h2 className=\"text-lg text-blue-500 uppercase\">\n            Registro de usuario\n          </h2>\n          <FormUser\n            handleChange={handleChange}\n            user={user}\n            handleSubmit={handleSubmit}\n          />\n        </section>\n        <section className=\"w-full px-4 mt-4 md:px-8 md:mt-0\">\n          <h2 className=\"text-lg text-blue-500 uppercase\">\n            Usuarios registrados\n          </h2>\n          <div className=\"overflow-x-auto\">\n            <div className=\"inline-block min-w-full overflow-hidden align-middle shadow\">\n              <ListUsers users={users} />\n            </div>\n          </div>\n        </section>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}